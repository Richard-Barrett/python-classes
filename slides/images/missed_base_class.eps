%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 290 232
%%Creator: yExport 1.3
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, November 5, 2012 10:59:06 PM EET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
290 232 setpagesize
0 0 0 0 setmargins
0 0 setorigin
290 232 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
290.000 0.00000 l
290.000 232.000 l
0.00000 232.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 290 232 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -214.000 -149.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
214.000 149.000 m
504.000 149.000 l
504.000 381.000 l
214.000 381.000 l
214.000 149.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -214.000 -149.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -214.000 -149.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -214.000 -149.000 ] defaultmatrix matrix concatmatrix setmatrix
q
q
[ 103.000 0.00000 0.00000 92.0000 310.000 156.000 ] concat
<<
/ImageType 1
/Width 103  /Height 92
/BitsPerComponent 8
/Decode [0 1 0 1 0 1]
/ImageMatrix [103 0 0 92 0 0]
/DataSource currentfile /ASCII85Decode filter /FlateDecode filter 
>> image
Gb"/kgJ1pL'Li'%Ip0Yi7VK?t9=[J&JsEB6X.VckWu^^u6IM4<PbuQGNq]lD3LFT#T%;)C0ub&?G0fdO
oC"W06=cXIUcZuCRB+kQ\Qo,[AJ$+`1bt5Y]X#,I>o^^q%hB2Wg$JG+p?(N"B8DY-FCZXGGtC_R5oO)n
5!I9ToBC@CH$MCkO8JnTq>'iI&0]Y50H_T3a\-Bb)`?Y+^?$^ZNCLTfn)WQ*?E[G2eaFYJ0%..2/Wuig
eBBHJ[[L.WR[2s''2D>!3V2IuW)+miHf]$F7%oLW+rNu+l#]J@W,fkrQPS,1l+Xa?_E@"#i8NX'3h9$B
;I;bD>a\84S'@6k-1[4fljOfoM(akCm-a9OiCmgZ;Sh#brr1d2hWI-I=sB*E*o?*"F#o^_0L0nm9&fuK
RER"%,EpDPdP6d\'KUK6Di@]&fc1KW9IT"Z09$@!bE+Z:XtoJD"T08>44?D!C"+B"cVkSX.e"fRON(MK
bOP\1eS6s7Mi"8:=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7m
J>EQSRXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7mJ>EQS
RXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IR&&V=@-aTSZ$6WRStN<[\[Ip%i&MQqjP`8R&A"CGZsK@PO(g
E+%>T8=*!s%h9(AV,FYQ*0!Fofe!.%[.VkXa^ih7[>p</Ze6m@j30p$OH,dkE]N^!g[0oWMu3DKXe]g:
2e9^dO#Qp$%Mq0\Z#[BKhQsPplg*m4I(n,4dcakm(27qQ*R;JcF3;/Y6\J\YK8_)CG.W^c[YluoAQp]$
49p,K4H3q#CTg^TJjeDlUa%*U0h,o`a5<W%=glBjcKQfK%>Vi75B(k/Mf`Lj7O#%?jE@kJfVYK=2n*8'
M)nU,a4j*^o"JabpWM:qmqClE:[0]?8/H,)hpnn)[D9$"Ppg.$0uj.9+-OT!ao~>
Q
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [318.0 164.0 400.0 235.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.8 0.8 1.0]
         /C1 [0.83137256 0.83137256 0.83137256]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
318.000 168.000 m
318.000 231.000 l
318.000 233.209 319.791 235.000 322.000 235.000  c
396.000 235.000 l
398.209 235.000 400.000 233.209 400.000 231.000  c
400.000 168.000 l
400.000 165.791 398.209 164.000 396.000 164.000  c
322.000 164.000 l
319.791 164.000 318.000 165.791 318.000 168.000  c
h
f
0 J
1.45000 M
.0705882 .243137 .635294 RG
newpath
318.000 168.000 m
318.000 231.000 l
318.000 233.209 319.791 235.000 322.000 235.000  c
396.000 235.000 l
398.209 235.000 400.000 233.209 400.000 231.000  c
400.000 168.000 l
400.000 165.791 398.209 164.000 396.000 164.000  c
322.000 164.000 l
319.791 164.000 318.000 165.791 318.000 168.000  c
h
S
0.00000 0.00000 0.00000 RG
2 J
10.0000 M
0 J
1.45000 M
newpath
335.762 177.847 m
342.215 177.847 l
342.215 179.003 l
337.137 179.003 l
337.137 182.034 l
341.997 182.034 l
341.997 183.190 l
337.137 183.190 l
337.137 186.894 l
342.340 186.894 l
342.340 188.050 l
335.762 188.050 l
335.762 177.847 l
h
352.027 177.425 m
351.412 178.477 350.957 179.516 350.660 180.542  c
350.363 181.568 350.214 182.607 350.214 183.659  c
350.214 184.711 350.365 185.753 350.667 186.784  c
350.970 187.815 351.423 188.852 352.027 189.894  c
350.933 189.894 l
350.246 188.821 349.733 187.769 349.394 186.737  c
349.056 185.706 348.886 184.680 348.886 183.659  c
348.886 182.638 349.056 181.612 349.394 180.581  c
349.733 179.550 350.246 178.498 350.933 177.425  c
352.027 177.425 l
h
355.895 178.972 m
355.895 186.909 l
357.567 186.909 l
358.973 186.909 360.004 186.591 360.661 185.956  c
361.317 185.321 361.645 184.315 361.645 182.940  c
361.645 181.565 361.317 180.560 360.661 179.925  c
360.004 179.289 358.973 178.972 357.567 178.972  c
355.895 178.972 l
h
354.520 177.847 m
357.364 177.847 l
359.333 177.847 360.780 178.258 361.708 179.081  c
362.635 179.904 363.098 181.190 363.098 182.940  c
363.098 184.701 362.635 185.993 361.708 186.815  c
360.780 187.638 359.333 188.050 357.364 188.050  c
354.520 188.050 l
354.520 177.847 l
h
365.566 186.315 m
367.003 186.315 l
367.003 187.487 l
365.894 189.675 l
365.003 189.675 l
365.566 187.487 l
365.566 186.315 l
h
377.391 178.628 m
377.391 180.081 l
376.922 179.654 376.425 179.334 375.899 179.120  c
375.373 178.907 374.818 178.800 374.235 178.800  c
373.068 178.800 372.175 179.157 371.555 179.870  c
370.935 180.584 370.625 181.612 370.625 182.956  c
370.625 184.300 370.935 185.328 371.555 186.042  c
372.175 186.756 373.068 187.112 374.235 187.112  c
374.818 187.112 375.373 187.006 375.899 186.792  c
376.425 186.578 376.922 186.253 377.391 185.815  c
377.391 187.269 l
376.912 187.591 376.402 187.836 375.860 188.003  c
375.318 188.170 374.745 188.253 374.141 188.253  c
372.599 188.253 371.383 187.779 370.493 186.831  c
369.602 185.883 369.157 184.591 369.157 182.956  c
369.157 181.321 369.602 180.029 370.493 179.081  c
371.383 178.133 372.599 177.659 374.141 177.659  c
374.756 177.659 375.334 177.740 375.875 177.901  c
376.417 178.063 376.922 178.305 377.391 178.628  c
h
379.276 177.425 m
380.370 177.425 l
381.047 178.498 381.557 179.550 381.901 180.581  c
382.245 181.612 382.417 182.638 382.417 183.659  c
382.417 184.680 382.245 185.706 381.901 186.737  c
381.557 187.769 381.047 188.821 380.370 189.894  c
379.276 189.894 l
379.880 188.852 380.331 187.815 380.627 186.784  c
380.924 185.753 381.073 184.711 381.073 183.659  c
381.073 182.607 380.924 181.568 380.627 180.542  c
380.331 179.516 379.880 178.477 379.276 177.425  c
h
f
newpath
f
newpath
343.914 210.003 m
343.914 211.050 l
342.711 211.050 l
342.253 211.050 341.938 211.141 341.766 211.323  c
341.594 211.506 341.508 211.836 341.508 212.315  c
341.508 212.987 l
343.570 212.987 l
343.570 213.972 l
341.508 213.972 l
341.508 220.644 l
340.242 220.644 l
340.242 213.972 l
339.039 213.972 l
339.039 212.987 l
340.242 212.987 l
340.242 212.456 l
340.242 211.602 340.440 210.979 340.836 210.589  c
341.232 210.198 341.857 210.003 342.711 210.003  c
343.914 210.003 l
h
347.983 210.019 m
347.369 211.071 346.913 212.110 346.616 213.136  c
346.319 214.162 346.171 215.201 346.171 216.253  c
346.171 217.305 346.322 218.347 346.624 219.378  c
346.926 220.409 347.379 221.446 347.983 222.487  c
346.890 222.487 l
346.202 221.414 345.689 220.362 345.351 219.331  c
345.012 218.300 344.843 217.274 344.843 216.253  c
344.843 215.232 345.012 214.206 345.351 213.175  c
345.689 212.144 346.202 211.091 346.890 210.019  c
347.983 210.019 l
h
355.305 213.206 m
355.305 214.409 l
354.951 214.222 354.581 214.084 354.195 213.995  c
353.810 213.907 353.414 213.862 353.008 213.862  c
352.383 213.862 351.914 213.956 351.602 214.144  c
351.289 214.331 351.133 214.618 351.133 215.003  c
351.133 215.295 351.245 215.524 351.469 215.690  c
351.693 215.857 352.143 216.013 352.820 216.159  c
353.242 216.269 l
354.138 216.456 354.773 216.724 355.148 217.073  c
355.523 217.422 355.711 217.909 355.711 218.534  c
355.711 219.243 355.430 219.805 354.867 220.222  c
354.305 220.638 353.534 220.847 352.555 220.847  c
352.138 220.847 351.708 220.805 351.266 220.722  c
350.823 220.638 350.357 220.519 349.867 220.362  c
349.867 219.065 l
350.326 219.305 350.781 219.485 351.234 219.604  c
351.688 219.724 352.133 219.784 352.570 219.784  c
353.164 219.784 353.620 219.683 353.938 219.479  c
354.255 219.276 354.414 218.993 354.414 218.628  c
354.414 218.284 354.299 218.021 354.070 217.839  c
353.841 217.657 353.336 217.482 352.555 217.315  c
352.117 217.206 l
351.346 217.050 350.786 216.800 350.438 216.456  c
350.089 216.112 349.914 215.649 349.914 215.065  c
349.914 214.336 350.169 213.776 350.680 213.386  c
351.190 212.995 351.914 212.800 352.852 212.800  c
353.320 212.800 353.760 212.834 354.172 212.901  c
354.583 212.969 354.961 213.071 355.305 213.206  c
h
364.271 216.503 m
364.271 217.112 l
358.474 217.112 l
358.536 217.977 358.799 218.636 359.263 219.089  c
359.726 219.542 360.375 219.769 361.208 219.769  c
361.698 219.769 362.169 219.711 362.622 219.597  c
363.075 219.482 363.526 219.305 363.974 219.065  c
363.974 220.253 l
363.515 220.440 363.049 220.586 362.575 220.690  c
362.101 220.795 361.625 220.847 361.146 220.847  c
359.916 220.847 358.945 220.490 358.231 219.776  c
357.518 219.063 357.161 218.102 357.161 216.894  c
357.161 215.633 357.500 214.636 358.177 213.901  c
358.854 213.167 359.771 212.800 360.927 212.800  c
361.958 212.800 362.773 213.131 363.372 213.792  c
363.971 214.453 364.271 215.357 364.271 216.503  c
h
363.005 216.128 m
362.994 215.440 362.802 214.891 362.427 214.479  c
362.052 214.068 361.557 213.862 360.942 213.862  c
360.234 213.862 359.669 214.063 359.247 214.464  c
358.825 214.865 358.583 215.425 358.521 216.144  c
363.005 216.128 l
h
366.321 210.003 m
367.587 210.003 l
367.587 220.644 l
366.321 220.644 l
366.321 210.003 l
h
374.102 210.003 m
374.102 211.050 l
372.898 211.050 l
372.440 211.050 372.125 211.141 371.953 211.323  c
371.781 211.506 371.695 211.836 371.695 212.315  c
371.695 212.987 l
373.758 212.987 l
373.758 213.972 l
371.695 213.972 l
371.695 220.644 l
370.430 220.644 l
370.430 213.972 l
369.227 213.972 l
369.227 212.987 l
370.430 212.987 l
370.430 212.456 l
370.430 211.602 370.628 210.979 371.023 210.589  c
371.419 210.198 372.044 210.003 372.898 210.003  c
374.102 210.003 l
h
374.952 210.019 m
376.046 210.019 l
376.723 211.091 377.233 212.144 377.577 213.175  c
377.921 214.206 378.093 215.232 378.093 216.253  c
378.093 217.274 377.921 218.300 377.577 219.331  c
377.233 220.362 376.723 221.414 376.046 222.487  c
374.952 222.487 l
375.556 221.446 376.007 220.409 376.304 219.378  c
376.601 218.347 376.749 217.305 376.749 216.253  c
376.749 215.201 376.601 214.162 376.304 213.136  c
376.007 212.110 375.556 211.071 374.952 210.019  c
h
f
2 J
10.0000 M
Q
q
q
[ 103.000 0.00000 0.00000 92.0000 399.000 286.500 ] concat
<<
/ImageType 1
/Width 103  /Height 92
/BitsPerComponent 8
/Decode [0 1 0 1 0 1]
/ImageMatrix [103 0 0 92 0 0]
/DataSource currentfile /ASCII85Decode filter /FlateDecode filter 
>> image
Gb"/kgJ1pL'Li'%Ip0Yi7VK?t9=[J&JsEB6X.VckWu^^u6IM4<PbuQGNq]lD3LFT#T%;)C0ub&?G0fdO
oC"W06=cXIUcZuCRB+kQ\Qo,[AJ$+`1bt5Y]X#,I>o^^q%hB2Wg$JG+p?(N"B8DY-FCZXGGtC_R5oO)n
5!I9ToBC@CH$MCkO8JnTq>'iI&0]Y50H_T3a\-Bb)`?Y+^?$^ZNCLTfn)WQ*?E[G2eaFYJ0%..2/Wuig
eBBHJ[[L.WR[2s''2D>!3V2IuW)+miHf]$F7%oLW+rNu+l#]J@W,fkrQPS,1l+Xa?_E@"#i8NX'3h9$B
;I;bD>a\84S'@6k-1[4fljOfoM(akCm-a9OiCmgZ;Sh#brr1d2hWI-I=sB*E*o?*"F#o^_0L0nm9&fuK
RER"%,EpDPdP6d\'KUK6Di@]&fc1KW9IT"Z09$@!bE+Z:XtoJD"T08>44?D!C"+B"cVkSX.e"fRON(MK
bOP\1eS6s7Mi"8:=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7m
J>EQSRXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7mJ>EQS
RXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IR&&V=@-aTSZ$6WRStN<[\[Ip%i&MQqjP`8R&A"CGZsK@PO(g
E+%>T8=*!s%h9(AV,FYQ*0!Fofe!.%[.VkXa^ih7[>p</Ze6m@j30p$OH,dkE]N^!g[0oWMu3DKXe]g:
2e9^dO#Qp$%Mq0\Z#[BKhQsPplg*m4I(n,4dcakm(27qQ*R;JcF3;/Y6\J\YK8_)CG.W^c[YluoAQp]$
49p,K4H3q#CTg^TJjeDlUa%*U0h,o`a5<W%=glBjcKQfK%>Vi75B(k/Mf`Lj7O#%?jE@kJfVYK=2n*8'
M)nU,a4j*^o"JabpWM:qmqClE:[0]?8/H,)hpnn)[D9$"Ppg.$0uj.9+-OT!ao~>
Q
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [407.0 294.5 489.0 365.5]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.8 0.8 1.0]
         /C1 [0.83137256 0.83137256 0.83137256]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
407.000 298.500 m
407.000 361.500 l
407.000 363.709 408.791 365.500 411.000 365.500  c
485.000 365.500 l
487.209 365.500 489.000 363.709 489.000 361.500  c
489.000 298.500 l
489.000 296.291 487.209 294.500 485.000 294.500  c
411.000 294.500 l
408.791 294.500 407.000 296.291 407.000 298.500  c
h
f
0 J
1.45000 M
.0705882 .243137 .635294 RG
newpath
407.000 298.500 m
407.000 361.500 l
407.000 363.709 408.791 365.500 411.000 365.500  c
485.000 365.500 l
487.209 365.500 489.000 363.709 489.000 361.500  c
489.000 298.500 l
489.000 296.291 487.209 294.500 485.000 294.500  c
411.000 294.500 l
408.791 294.500 407.000 296.291 407.000 298.500  c
h
S
0.00000 0.00000 0.00000 RG
2 J
10.0000 M
0 J
1.45000 M
newpath
425.095 309.128 m
425.095 310.581 l
424.626 310.154 424.129 309.834 423.603 309.620  c
423.077 309.407 422.522 309.300 421.939 309.300  c
420.772 309.300 419.879 309.657 419.259 310.370  c
418.639 311.084 418.330 312.112 418.330 313.456  c
418.330 314.800 418.639 315.828 419.259 316.542  c
419.879 317.256 420.772 317.612 421.939 317.612  c
422.522 317.612 423.077 317.506 423.603 317.292  c
424.129 317.078 424.626 316.753 425.095 316.315  c
425.095 317.769 l
424.616 318.091 424.106 318.336 423.564 318.503  c
423.022 318.670 422.449 318.753 421.845 318.753  c
420.304 318.753 419.087 318.279 418.197 317.331  c
417.306 316.383 416.861 315.091 416.861 313.456  c
416.861 311.821 417.306 310.529 418.197 309.581  c
419.087 308.633 420.304 308.159 421.845 308.159  c
422.460 308.159 423.038 308.240 423.580 308.401  c
424.121 308.563 424.626 308.805 425.095 309.128  c
h
430.199 307.925 m
429.584 308.977 429.128 310.016 428.832 311.042  c
428.535 312.068 428.386 313.107 428.386 314.159  c
428.386 315.211 428.537 316.253 428.839 317.284  c
429.141 318.315 429.595 319.352 430.199 320.394  c
429.105 320.394 l
428.417 319.321 427.904 318.269 427.566 317.237  c
427.227 316.206 427.058 315.180 427.058 314.159  c
427.058 313.138 427.227 312.112 427.566 311.081  c
427.904 310.050 428.417 308.998 429.105 307.925  c
430.199 307.925 l
h
435.598 311.769 m
434.931 311.769 434.400 312.032 434.004 312.558  c
433.609 313.084 433.411 313.805 433.411 314.722  c
433.411 315.638 433.606 316.360 433.997 316.886  c
434.387 317.412 434.921 317.675 435.598 317.675  c
436.275 317.675 436.809 317.412 437.200 316.886  c
437.590 316.360 437.786 315.638 437.786 314.722  c
437.786 313.815 437.590 313.097 437.200 312.565  c
436.809 312.034 436.275 311.769 435.598 311.769  c
h
435.598 310.706 m
436.692 310.706 437.551 311.063 438.176 311.776  c
438.801 312.490 439.114 313.472 439.114 314.722  c
439.114 315.982 438.801 316.969 438.176 317.683  c
437.551 318.396 436.692 318.753 435.598 318.753  c
434.504 318.753 433.645 318.396 433.020 317.683  c
432.395 316.969 432.083 315.982 432.083 314.722  c
432.083 313.472 432.395 312.490 433.020 311.776  c
433.645 311.063 434.504 310.706 435.598 310.706  c
h
446.695 314.722 m
446.695 313.805 446.505 313.084 446.125 312.558  c
445.744 312.032 445.221 311.769 444.554 311.769  c
443.888 311.769 443.364 312.032 442.984 312.558  c
442.604 313.084 442.414 313.805 442.414 314.722  c
442.414 315.649 442.604 316.375 442.984 316.901  c
443.364 317.427 443.888 317.690 444.554 317.690  c
445.221 317.690 445.744 317.427 446.125 316.901  c
446.505 316.375 446.695 315.649 446.695 314.722  c
h
442.414 312.050 m
442.684 311.602 443.020 311.266 443.421 311.042  c
443.822 310.818 444.304 310.706 444.867 310.706  c
445.794 310.706 446.549 311.076 447.132 311.815  c
447.716 312.555 448.007 313.524 448.007 314.722  c
448.007 315.930 447.716 316.904 447.132 317.644  c
446.549 318.383 445.794 318.753 444.867 318.753  c
444.304 318.753 443.822 318.641 443.421 318.417  c
443.020 318.193 442.684 317.852 442.414 317.394  c
442.414 318.550 l
441.148 318.550 l
441.148 307.909 l
442.414 307.909 l
442.414 312.050 l
h
450.082 310.894 m
451.347 310.894 l
451.347 318.690 l
451.347 319.659 451.162 320.362 450.792 320.800  c
450.423 321.237 449.821 321.456 448.988 321.456  c
448.519 321.456 l
448.519 320.394 l
448.847 320.394 l
449.326 320.394 449.652 320.284 449.824 320.065  c
449.996 319.847 450.082 319.388 450.082 318.690  c
450.082 310.894 l
h
450.082 307.909 m
451.347 307.909 l
451.347 309.503 l
450.082 309.503 l
450.082 307.909 l
h
460.534 314.409 m
460.534 315.019 l
454.737 315.019 l
454.799 315.883 455.062 316.542 455.526 316.995  c
455.989 317.448 456.638 317.675 457.471 317.675  c
457.961 317.675 458.432 317.618 458.885 317.503  c
459.338 317.388 459.789 317.211 460.237 316.972  c
460.237 318.159 l
459.778 318.347 459.312 318.493 458.838 318.597  c
458.364 318.701 457.888 318.753 457.409 318.753  c
456.180 318.753 455.208 318.396 454.495 317.683  c
453.781 316.969 453.424 316.008 453.424 314.800  c
453.424 313.539 453.763 312.542 454.440 311.808  c
455.117 311.073 456.034 310.706 457.190 310.706  c
458.221 310.706 459.036 311.037 459.635 311.698  c
460.234 312.360 460.534 313.263 460.534 314.409  c
h
459.268 314.034 m
459.258 313.347 459.065 312.797 458.690 312.386  c
458.315 311.974 457.820 311.769 457.206 311.769  c
456.497 311.769 455.932 311.969 455.510 312.370  c
455.088 312.771 454.846 313.331 454.784 314.050  c
459.268 314.034 l
h
468.100 311.190 m
468.100 312.362 l
467.746 312.164 467.389 312.016 467.030 311.917  c
466.670 311.818 466.308 311.769 465.944 311.769  c
465.131 311.769 464.499 312.029 464.045 312.550  c
463.592 313.071 463.366 313.795 463.366 314.722  c
463.366 315.659 463.592 316.386 464.045 316.901  c
464.499 317.417 465.131 317.675 465.944 317.675  c
466.308 317.675 466.670 317.628 467.030 317.534  c
467.389 317.440 467.746 317.295 468.100 317.097  c
468.100 318.253 l
467.746 318.420 467.381 318.545 467.006 318.628  c
466.631 318.711 466.236 318.753 465.819 318.753  c
464.663 318.753 463.743 318.391 463.061 317.667  c
462.379 316.943 462.038 315.961 462.038 314.722  c
462.038 313.482 462.381 312.503 463.069 311.784  c
463.756 311.065 464.699 310.706 465.897 310.706  c
466.282 310.706 466.660 310.745 467.030 310.823  c
467.400 310.901 467.756 311.024 468.100 311.190  c
h
471.532 308.722 m
471.532 310.894 l
474.125 310.894 l
474.125 311.878 l
471.532 311.878 l
471.532 316.034 l
471.532 316.649 471.618 317.047 471.790 317.229  c
471.961 317.412 472.308 317.503 472.829 317.503  c
474.125 317.503 l
474.125 318.550 l
472.829 318.550 l
471.860 318.550 471.191 318.368 470.821 318.003  c
470.451 317.638 470.266 316.982 470.266 316.034  c
470.266 311.878 l
469.344 311.878 l
469.344 310.894 l
470.266 310.894 l
470.266 308.722 l
471.532 308.722 l
h
475.583 307.925 m
476.677 307.925 l
477.354 308.998 477.865 310.050 478.208 311.081  c
478.552 312.112 478.724 313.138 478.724 314.159  c
478.724 315.180 478.552 316.206 478.208 317.237  c
477.865 318.269 477.354 319.321 476.677 320.394  c
475.583 320.394 l
476.188 319.352 476.638 318.315 476.935 317.284  c
477.232 316.253 477.380 315.211 477.380 314.159  c
477.380 313.107 477.232 312.068 476.935 311.042  c
476.638 310.016 476.188 308.977 475.583 307.925  c
h
f
newpath
f
newpath
432.914 340.503 m
432.914 341.550 l
431.711 341.550 l
431.253 341.550 430.938 341.641 430.766 341.823  c
430.594 342.006 430.508 342.336 430.508 342.815  c
430.508 343.487 l
432.570 343.487 l
432.570 344.472 l
430.508 344.472 l
430.508 351.144 l
429.242 351.144 l
429.242 344.472 l
428.039 344.472 l
428.039 343.487 l
429.242 343.487 l
429.242 342.956 l
429.242 342.102 429.440 341.479 429.836 341.089  c
430.232 340.698 430.857 340.503 431.711 340.503  c
432.914 340.503 l
h
436.983 340.519 m
436.369 341.571 435.913 342.610 435.616 343.636  c
435.319 344.662 435.171 345.701 435.171 346.753  c
435.171 347.805 435.322 348.847 435.624 349.878  c
435.926 350.909 436.379 351.946 436.983 352.987  c
435.890 352.987 l
435.202 351.914 434.689 350.862 434.351 349.831  c
434.012 348.800 433.843 347.774 433.843 346.753  c
433.843 345.732 434.012 344.706 434.351 343.675  c
434.689 342.644 435.202 341.591 435.890 340.519  c
436.983 340.519 l
h
444.305 343.706 m
444.305 344.909 l
443.951 344.722 443.581 344.584 443.195 344.495  c
442.810 344.407 442.414 344.362 442.008 344.362  c
441.383 344.362 440.914 344.456 440.602 344.644  c
440.289 344.831 440.133 345.118 440.133 345.503  c
440.133 345.795 440.245 346.024 440.469 346.190  c
440.693 346.357 441.143 346.513 441.820 346.659  c
442.242 346.769 l
443.138 346.956 443.773 347.224 444.148 347.573  c
444.523 347.922 444.711 348.409 444.711 349.034  c
444.711 349.743 444.430 350.305 443.867 350.722  c
443.305 351.138 442.534 351.347 441.555 351.347  c
441.138 351.347 440.708 351.305 440.266 351.222  c
439.823 351.138 439.357 351.019 438.867 350.862  c
438.867 349.565 l
439.326 349.805 439.781 349.985 440.234 350.104  c
440.688 350.224 441.133 350.284 441.570 350.284  c
442.164 350.284 442.620 350.183 442.938 349.979  c
443.255 349.776 443.414 349.493 443.414 349.128  c
443.414 348.784 443.299 348.521 443.070 348.339  c
442.841 348.157 442.336 347.982 441.555 347.815  c
441.117 347.706 l
440.346 347.550 439.786 347.300 439.438 346.956  c
439.089 346.612 438.914 346.149 438.914 345.565  c
438.914 344.836 439.169 344.276 439.680 343.886  c
440.190 343.495 440.914 343.300 441.852 343.300  c
442.320 343.300 442.760 343.334 443.172 343.401  c
443.583 343.469 443.961 343.571 444.305 343.706  c
h
453.271 347.003 m
453.271 347.612 l
447.474 347.612 l
447.536 348.477 447.799 349.136 448.263 349.589  c
448.726 350.042 449.375 350.269 450.208 350.269  c
450.698 350.269 451.169 350.211 451.622 350.097  c
452.075 349.982 452.526 349.805 452.974 349.565  c
452.974 350.753 l
452.515 350.940 452.049 351.086 451.575 351.190  c
451.101 351.295 450.625 351.347 450.146 351.347  c
448.916 351.347 447.945 350.990 447.231 350.276  c
446.518 349.563 446.161 348.602 446.161 347.394  c
446.161 346.133 446.500 345.136 447.177 344.401  c
447.854 343.667 448.771 343.300 449.927 343.300  c
450.958 343.300 451.773 343.631 452.372 344.292  c
452.971 344.953 453.271 345.857 453.271 347.003  c
h
452.005 346.628 m
451.994 345.940 451.802 345.391 451.427 344.979  c
451.052 344.568 450.557 344.362 449.942 344.362  c
449.234 344.362 448.669 344.563 448.247 344.964  c
447.825 345.365 447.583 345.925 447.521 346.644  c
452.005 346.628 l
h
455.321 340.503 m
456.587 340.503 l
456.587 351.144 l
455.321 351.144 l
455.321 340.503 l
h
463.102 340.503 m
463.102 341.550 l
461.898 341.550 l
461.440 341.550 461.125 341.641 460.953 341.823  c
460.781 342.006 460.695 342.336 460.695 342.815  c
460.695 343.487 l
462.758 343.487 l
462.758 344.472 l
460.695 344.472 l
460.695 351.144 l
459.430 351.144 l
459.430 344.472 l
458.227 344.472 l
458.227 343.487 l
459.430 343.487 l
459.430 342.956 l
459.430 342.102 459.628 341.479 460.023 341.089  c
460.419 340.698 461.044 340.503 461.898 340.503  c
463.102 340.503 l
h
463.952 340.519 m
465.046 340.519 l
465.723 341.591 466.233 342.644 466.577 343.675  c
466.921 344.706 467.093 345.732 467.093 346.753  c
467.093 347.774 466.921 348.800 466.577 349.831  c
466.233 350.862 465.723 351.914 465.046 352.987  c
463.952 352.987 l
464.556 351.946 465.007 350.909 465.304 349.878  c
465.601 348.847 465.749 347.805 465.749 346.753  c
465.749 345.701 465.601 344.662 465.304 343.636  c
465.007 342.610 464.556 341.571 463.952 340.519  c
h
f
2 J
10.0000 M
Q
q
q
[ 103.000 0.00000 0.00000 92.0000 221.000 286.500 ] concat
<<
/ImageType 1
/Width 103  /Height 92
/BitsPerComponent 8
/Decode [0 1 0 1 0 1]
/ImageMatrix [103 0 0 92 0 0]
/DataSource currentfile /ASCII85Decode filter /FlateDecode filter 
>> image
Gb"/kgJ1pL'Li'%Ip0Yi7VK?t9=[J&JsEB6X.VckWu^^u6IM4<PbuQGNq]lD3LFT#T%;)C0ub&?G0fdO
oC"W06=cXIUcZuCRB+kQ\Qo,[AJ$+`1bt5Y]X#,I>o^^q%hB2Wg$JG+p?(N"B8DY-FCZXGGtC_R5oO)n
5!I9ToBC@CH$MCkO8JnTq>'iI&0]Y50H_T3a\-Bb)`?Y+^?$^ZNCLTfn)WQ*?E[G2eaFYJ0%..2/Wuig
eBBHJ[[L.WR[2s''2D>!3V2IuW)+miHf]$F7%oLW+rNu+l#]J@W,fkrQPS,1l+Xa?_E@"#i8NX'3h9$B
;I;bD>a\84S'@6k-1[4fljOfoM(akCm-a9OiCmgZ;Sh#brr1d2hWI-I=sB*E*o?*"F#o^_0L0nm9&fuK
RER"%,EpDPdP6d\'KUK6Di@]&fc1KW9IT"Z09$@!bE+Z:XtoJD"T08>44?D!C"+B"cVkSX.e"fRON(MK
bOP\1eS6s7Mi"8:=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7m
J>EQSRXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IOc:$!<XHV$U7mJ>EQS
RXh4@=IOc:$!<XHV$U7mJ>EQSRXh4@=IR&&V=@-aTSZ$6WRStN<[\[Ip%i&MQqjP`8R&A"CGZsK@PO(g
E+%>T8=*!s%h9(AV,FYQ*0!Fofe!.%[.VkXa^ih7[>p</Ze6m@j30p$OH,dkE]N^!g[0oWMu3DKXe]g:
2e9^dO#Qp$%Mq0\Z#[BKhQsPplg*m4I(n,4dcakm(27qQ*R;JcF3;/Y6\J\YK8_)CG.W^c[YluoAQp]$
49p,K4H3q#CTg^TJjeDlUa%*U0h,o`a5<W%=glBjcKQfK%>Vi75B(k/Mf`Lj7O#%?jE@kJfVYK=2n*8'
M)nU,a4j*^o"JabpWM:qmqClE:[0]?8/H,)hpnn)[D9$"Ppg.$0uj.9+-OT!ao~>
Q
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [229.0 294.5 311.0 365.5]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.8 0.8 1.0]
         /C1 [0.83137256 0.83137256 0.83137256]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
229.000 298.500 m
229.000 361.500 l
229.000 363.709 230.791 365.500 233.000 365.500  c
307.000 365.500 l
309.209 365.500 311.000 363.709 311.000 361.500  c
311.000 298.500 l
311.000 296.291 309.209 294.500 307.000 294.500  c
233.000 294.500 l
230.791 294.500 229.000 296.291 229.000 298.500  c
h
f
0 J
1.45000 M
.0705882 .243137 .635294 RG
newpath
229.000 298.500 m
229.000 361.500 l
229.000 363.709 230.791 365.500 233.000 365.500  c
307.000 365.500 l
309.209 365.500 311.000 363.709 311.000 361.500  c
311.000 298.500 l
311.000 296.291 309.209 294.500 307.000 294.500  c
233.000 294.500 l
230.791 294.500 229.000 296.291 229.000 298.500  c
h
S
0.00000 0.00000 0.00000 RG
2 J
10.0000 M
0 J
1.45000 M
newpath
240.327 309.472 m
240.327 317.409 l
241.999 317.409 l
243.405 317.409 244.437 317.091 245.093 316.456  c
245.749 315.821 246.077 314.815 246.077 313.440  c
246.077 312.065 245.749 311.060 245.093 310.425  c
244.437 309.789 243.405 309.472 241.999 309.472  c
240.327 309.472 l
h
238.952 308.347 m
241.796 308.347 l
243.765 308.347 245.213 308.758 246.140 309.581  c
247.067 310.404 247.530 311.690 247.530 313.440  c
247.530 315.201 247.067 316.493 246.140 317.315  c
245.213 318.138 243.765 318.550 241.796 318.550  c
238.952 318.550 l
238.952 308.347 l
h
252.701 307.925 m
252.087 308.977 251.631 310.016 251.334 311.042  c
251.037 312.068 250.889 313.107 250.889 314.159  c
250.889 315.211 251.040 316.253 251.342 317.284  c
251.644 318.315 252.097 319.352 252.701 320.394  c
251.607 320.394 l
250.920 319.321 250.407 318.269 250.068 317.237  c
249.730 316.206 249.561 315.180 249.561 314.159  c
249.561 313.138 249.730 312.112 250.068 311.081  c
250.407 310.050 250.920 308.998 251.607 307.925  c
252.701 307.925 l
h
258.101 311.769 m
257.434 311.769 256.903 312.032 256.507 312.558  c
256.111 313.084 255.913 313.805 255.913 314.722  c
255.913 315.638 256.108 316.360 256.499 316.886  c
256.890 317.412 257.424 317.675 258.101 317.675  c
258.778 317.675 259.312 317.412 259.702 316.886  c
260.093 316.360 260.288 315.638 260.288 314.722  c
260.288 313.815 260.093 313.097 259.702 312.565  c
259.312 312.034 258.778 311.769 258.101 311.769  c
h
258.101 310.706 m
259.194 310.706 260.054 311.063 260.679 311.776  c
261.304 312.490 261.616 313.472 261.616 314.722  c
261.616 315.982 261.304 316.969 260.679 317.683  c
260.054 318.396 259.194 318.753 258.101 318.753  c
257.007 318.753 256.147 318.396 255.522 317.683  c
254.897 316.969 254.585 315.982 254.585 314.722  c
254.585 313.472 254.897 312.490 255.522 311.776  c
256.147 311.063 257.007 310.706 258.101 310.706  c
h
269.197 314.722 m
269.197 313.805 269.007 313.084 268.627 312.558  c
268.247 312.032 267.723 311.769 267.057 311.769  c
266.390 311.769 265.867 312.032 265.486 312.558  c
265.106 313.084 264.916 313.805 264.916 314.722  c
264.916 315.649 265.106 316.375 265.486 316.901  c
265.867 317.427 266.390 317.690 267.057 317.690  c
267.723 317.690 268.247 317.427 268.627 316.901  c
269.007 316.375 269.197 315.649 269.197 314.722  c
h
264.916 312.050 m
265.187 311.602 265.523 311.266 265.924 311.042  c
266.325 310.818 266.807 310.706 267.369 310.706  c
268.296 310.706 269.051 311.076 269.635 311.815  c
270.218 312.555 270.510 313.524 270.510 314.722  c
270.510 315.930 270.218 316.904 269.635 317.644  c
269.051 318.383 268.296 318.753 267.369 318.753  c
266.807 318.753 266.325 318.641 265.924 318.417  c
265.523 318.193 265.187 317.852 264.916 317.394  c
264.916 318.550 l
263.650 318.550 l
263.650 307.909 l
264.916 307.909 l
264.916 312.050 l
h
272.584 310.894 m
273.850 310.894 l
273.850 318.690 l
273.850 319.659 273.665 320.362 273.295 320.800  c
272.925 321.237 272.324 321.456 271.490 321.456  c
271.021 321.456 l
271.021 320.394 l
271.350 320.394 l
271.829 320.394 272.154 320.284 272.326 320.065  c
272.498 319.847 272.584 319.388 272.584 318.690  c
272.584 310.894 l
h
272.584 307.909 m
273.850 307.909 l
273.850 309.503 l
272.584 309.503 l
272.584 307.909 l
h
283.036 314.409 m
283.036 315.019 l
277.239 315.019 l
277.302 315.883 277.565 316.542 278.028 316.995  c
278.492 317.448 279.140 317.675 279.974 317.675  c
280.463 317.675 280.935 317.618 281.388 317.503  c
281.841 317.388 282.291 317.211 282.739 316.972  c
282.739 318.159 l
282.281 318.347 281.815 318.493 281.341 318.597  c
280.867 318.701 280.390 318.753 279.911 318.753  c
278.682 318.753 277.711 318.396 276.997 317.683  c
276.284 316.969 275.927 316.008 275.927 314.800  c
275.927 313.539 276.265 312.542 276.942 311.808  c
277.619 311.073 278.536 310.706 279.692 310.706  c
280.724 310.706 281.539 311.037 282.138 311.698  c
282.737 312.360 283.036 313.263 283.036 314.409  c
h
281.771 314.034 m
281.760 313.347 281.567 312.797 281.192 312.386  c
280.817 311.974 280.323 311.769 279.708 311.769  c
279.000 311.769 278.435 311.969 278.013 312.370  c
277.591 312.771 277.349 313.331 277.286 314.050  c
281.771 314.034 l
h
290.603 311.190 m
290.603 312.362 l
290.248 312.164 289.892 312.016 289.532 311.917  c
289.173 311.818 288.811 311.769 288.446 311.769  c
287.634 311.769 287.001 312.029 286.548 312.550  c
286.095 313.071 285.868 313.795 285.868 314.722  c
285.868 315.659 286.095 316.386 286.548 316.901  c
287.001 317.417 287.634 317.675 288.446 317.675  c
288.811 317.675 289.173 317.628 289.532 317.534  c
289.892 317.440 290.248 317.295 290.603 317.097  c
290.603 318.253 l
290.248 318.420 289.884 318.545 289.509 318.628  c
289.134 318.711 288.738 318.753 288.321 318.753  c
287.165 318.753 286.246 318.391 285.563 317.667  c
284.881 316.943 284.540 315.961 284.540 314.722  c
284.540 313.482 284.884 312.503 285.571 311.784  c
286.259 311.065 287.201 310.706 288.399 310.706  c
288.785 310.706 289.162 310.745 289.532 310.823  c
289.902 310.901 290.259 311.024 290.603 311.190  c
h
294.034 308.722 m
294.034 310.894 l
296.628 310.894 l
296.628 311.878 l
294.034 311.878 l
294.034 316.034 l
294.034 316.649 294.120 317.047 294.292 317.229  c
294.464 317.412 294.810 317.503 295.331 317.503  c
296.628 317.503 l
296.628 318.550 l
295.331 318.550 l
294.362 318.550 293.693 318.368 293.323 318.003  c
292.953 317.638 292.769 316.982 292.769 316.034  c
292.769 311.878 l
291.847 311.878 l
291.847 310.894 l
292.769 310.894 l
292.769 308.722 l
294.034 308.722 l
h
298.086 307.925 m
299.180 307.925 l
299.857 308.998 300.367 310.050 300.711 311.081  c
301.055 312.112 301.227 313.138 301.227 314.159  c
301.227 315.180 301.055 316.206 300.711 317.237  c
300.367 318.269 299.857 319.321 299.180 320.394  c
298.086 320.394 l
298.690 319.352 299.141 318.315 299.438 317.284  c
299.734 316.253 299.883 315.211 299.883 314.159  c
299.883 313.107 299.734 312.068 299.438 311.042  c
299.141 310.016 298.690 308.977 298.086 307.925  c
h
f
newpath
f
newpath
254.914 340.503 m
254.914 341.550 l
253.711 341.550 l
253.253 341.550 252.938 341.641 252.766 341.823  c
252.594 342.006 252.508 342.336 252.508 342.815  c
252.508 343.487 l
254.570 343.487 l
254.570 344.472 l
252.508 344.472 l
252.508 351.144 l
251.242 351.144 l
251.242 344.472 l
250.039 344.472 l
250.039 343.487 l
251.242 343.487 l
251.242 342.956 l
251.242 342.102 251.440 341.479 251.836 341.089  c
252.232 340.698 252.857 340.503 253.711 340.503  c
254.914 340.503 l
h
258.983 340.519 m
258.369 341.571 257.913 342.610 257.616 343.636  c
257.319 344.662 257.171 345.701 257.171 346.753  c
257.171 347.805 257.322 348.847 257.624 349.878  c
257.926 350.909 258.379 351.946 258.983 352.987  c
257.890 352.987 l
257.202 351.914 256.689 350.862 256.351 349.831  c
256.012 348.800 255.843 347.774 255.843 346.753  c
255.843 345.732 256.012 344.706 256.351 343.675  c
256.689 342.644 257.202 341.591 257.890 340.519  c
258.983 340.519 l
h
266.305 343.706 m
266.305 344.909 l
265.951 344.722 265.581 344.584 265.195 344.495  c
264.810 344.407 264.414 344.362 264.008 344.362  c
263.383 344.362 262.914 344.456 262.602 344.644  c
262.289 344.831 262.133 345.118 262.133 345.503  c
262.133 345.795 262.245 346.024 262.469 346.190  c
262.693 346.357 263.143 346.513 263.820 346.659  c
264.242 346.769 l
265.138 346.956 265.773 347.224 266.148 347.573  c
266.523 347.922 266.711 348.409 266.711 349.034  c
266.711 349.743 266.430 350.305 265.867 350.722  c
265.305 351.138 264.534 351.347 263.555 351.347  c
263.138 351.347 262.708 351.305 262.266 351.222  c
261.823 351.138 261.357 351.019 260.867 350.862  c
260.867 349.565 l
261.326 349.805 261.781 349.985 262.234 350.104  c
262.688 350.224 263.133 350.284 263.570 350.284  c
264.164 350.284 264.620 350.183 264.938 349.979  c
265.255 349.776 265.414 349.493 265.414 349.128  c
265.414 348.784 265.299 348.521 265.070 348.339  c
264.841 348.157 264.336 347.982 263.555 347.815  c
263.117 347.706 l
262.346 347.550 261.786 347.300 261.438 346.956  c
261.089 346.612 260.914 346.149 260.914 345.565  c
260.914 344.836 261.169 344.276 261.680 343.886  c
262.190 343.495 262.914 343.300 263.852 343.300  c
264.320 343.300 264.760 343.334 265.172 343.401  c
265.583 343.469 265.961 343.571 266.305 343.706  c
h
275.271 347.003 m
275.271 347.612 l
269.474 347.612 l
269.536 348.477 269.799 349.136 270.263 349.589  c
270.726 350.042 271.375 350.269 272.208 350.269  c
272.698 350.269 273.169 350.211 273.622 350.097  c
274.075 349.982 274.526 349.805 274.974 349.565  c
274.974 350.753 l
274.515 350.940 274.049 351.086 273.575 351.190  c
273.101 351.295 272.625 351.347 272.146 351.347  c
270.916 351.347 269.945 350.990 269.231 350.276  c
268.518 349.563 268.161 348.602 268.161 347.394  c
268.161 346.133 268.500 345.136 269.177 344.401  c
269.854 343.667 270.771 343.300 271.927 343.300  c
272.958 343.300 273.773 343.631 274.372 344.292  c
274.971 344.953 275.271 345.857 275.271 347.003  c
h
274.005 346.628 m
273.994 345.940 273.802 345.391 273.427 344.979  c
273.052 344.568 272.557 344.362 271.942 344.362  c
271.234 344.362 270.669 344.563 270.247 344.964  c
269.825 345.365 269.583 345.925 269.521 346.644  c
274.005 346.628 l
h
277.321 340.503 m
278.587 340.503 l
278.587 351.144 l
277.321 351.144 l
277.321 340.503 l
h
285.102 340.503 m
285.102 341.550 l
283.898 341.550 l
283.440 341.550 283.125 341.641 282.953 341.823  c
282.781 342.006 282.695 342.336 282.695 342.815  c
282.695 343.487 l
284.758 343.487 l
284.758 344.472 l
282.695 344.472 l
282.695 351.144 l
281.430 351.144 l
281.430 344.472 l
280.227 344.472 l
280.227 343.487 l
281.430 343.487 l
281.430 342.956 l
281.430 342.102 281.628 341.479 282.023 341.089  c
282.419 340.698 283.044 340.503 283.898 340.503  c
285.102 340.503 l
h
285.952 340.519 m
287.046 340.519 l
287.723 341.591 288.233 342.644 288.577 343.675  c
288.921 344.706 289.093 345.732 289.093 346.753  c
289.093 347.774 288.921 348.800 288.577 349.831  c
288.233 350.862 287.723 351.914 287.046 352.987  c
285.952 352.987 l
286.556 351.946 287.007 350.909 287.304 349.878  c
287.601 348.847 287.749 347.805 287.749 346.753  c
287.749 345.701 287.601 344.662 287.304 343.636  c
287.007 342.610 286.556 341.571 285.952 340.519  c
h
f
2 J
10.0000 M
Q
0 J
1.45000 M
newpath
385.849 235.004 m
426.023 288.129 l
S
newpath
430.848 294.510 m
427.598 281.922 l
425.420 287.331 l
419.622 287.954 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
334.773 235.024 m
298.718 287.891 l
S
newpath
294.211 294.500 m
305.103 287.403 l
299.282 287.065 l
296.841 281.769 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
